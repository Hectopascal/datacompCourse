#include <stdio.h>
#include <sstream>
#include <fstream>
#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
#include <vector>
//void decodeInput(std::map<unsigned char,std::vector<mpfr_ptr>> &in, std::string input, int count);
std::string decodeInput(std::string input);

int main (int argc, char* argv[])
{
    std::ifstream infile(argv[1]);
    std::ofstream outfile(argv[2]); 
    std::stringstream buffer;
    if (infile.is_open() && outfile.is_open()){
        buffer << infile.rdbuf();
        std::string decoded = decodeInput(buffer.str());
        outfile<< decoded << "\n";
        infile.close();
        outfile.close();
    }
    return 0;
}

// comparator function for sorting vectors
bool sortVectorLex(const std::vector<char>& v1, const std::vector<char> &v2){
    std::string s1{v1.begin(),v1.end()};
    std::string s2{v2.begin(),v2.end()};
    return s1<s2;
}

std::string decodeInput(std::string input){
    int N = input.length();
    std::vector<std::vector<char>> matrix(N,std::vector<char>());
    //char matrix[n][n];
    //std::cout<< n<< " " << sizeof(matrix)/sizeof(matrix[0]) << std::endl;
    const char *code = input.c_str();
    for (int i = 0; i < N; ++i){
        for(int j = 0; j<N; ++j){
            matrix.at(j).push_back(code[j]);
        } 
        std::sort(matrix.begin(),matrix.end(),sortVectorLex);
        for(int k =0;k < N; ++k){
            for(int k =0;k < N; ++k){
                if (matrix.at(k).at(i) == '\n'){
                    std::cout<<"\\n";
                } else std::cout<<matrix.at(k).at(i) <<;
            }
            std::cout<<std::endl;
        }
        std::cout<<std::endl;
    }
      
        return "hello";
}
